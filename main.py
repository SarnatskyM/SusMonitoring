from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold, hlink
from keyboards.keyboard import *
from config.config import TOKEN, admins
from helper.status import *
import asyncio

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

#start func
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    if message.from_user.id in admins:
        getStatus()
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {hbold(message.from_user.full_name)}.\n–í–∞—à–∞ —Ä–æ–ª—å - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=start_keyboard, parse_mode="HTML")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        await message.answer_sticker("https://chpic.su/_data/stickers/m/menhera_anime/menhera_anime_006.webp?v=1693440002", "rb")
    else:
        await message.answer(f"–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –∫—Ç–æ –≤—ã?")
        await message.answer_sticker("https://chpic.su/_data/stickers/m/menhera_anime/menhera_anime_027.webp?v=1693440002", "rb")

# Main func keyboard 
@dp.message_handler(Text(equals=["üü¢–°—Ç–∞—Ç—É—Å –±–¥"]))
async def btn_status(message: types.Message):
    if message.from_user.id in admins:
        status = getStatus()
        if status != 500:
            statusCard = f"üü¢<b><i>–°—Ç–∞—Ç—É—Å –±–¥</i></b>\n{'-'*35}\n" \
                        f"–°—Ç–∞—Ç—É—Å –±–¥ - {status['is_active']}\n" \
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π - {status['operations']}\n" \
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ - {status['rollbacks']}\n" \
                        f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏–µ - {status['idle_conns']}\n" \
                        f"–°—Ä–µ–¥ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - {status['mean_response_time']}\n" \
                        f"Disk usage - {status['disk_usage']}\n" \
                        f"Disk usage percantage - {status['disk_usage_percantage']}\n" \
                        f"Max operation duration - {status['max_operation_duration']}\n{'-'*35}\n\n" \
                        f"<b><i>–¢–µ–∫—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è [{status['conns_num']}]:</i></b>\n"
            for conn in status['conns']:
                statusCard += f"<b>‚Ä¢ last_query</b> - {conn['last_query']}\n" \
                              f"<b>‚Ä¢ query_start</b> - {conn['query_start']}\n" \
                              f"<b>‚Ä¢ pid</b> - {conn['pid']}\n{'*'*35}\n\n"
            await message.answer(statusCard, parse_mode="HTML")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±—ç–∫–µ–Ω–¥—É")

@dp.message_handler(Text(equals=["üî¥–¢–µ–∫—É—â–∏–µ –æ—à–∏–±–∫–∏"]))
async def bts_errors(message: types.Message):
    if message.from_user.id in admins:
        await message.answer("–¢–µ–∫—É—â–µ–µ –æ—à–∏–±–∫–∏")
# ---------------------------


# for keyboard rotations
@dp.message_handler(Text(equals=["‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏"]))
async def btn_settings(message: types.Message):
    if message.from_user.id in admins:
        await message.answer("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=fix_keyboard)

@dp.message_handler(Text(equals=["‚Üê –ù–∞–∑–∞–¥"]))
async def btn_back(message: types.Message):
    if message.from_user.id in admins:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=start_keyboard)
# ---------------------------


# Fixing func keyboard 
@dp.message_handler(Text(equals=["üõ†–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–¥"]))
async def btn_reloadbd(message: types.Message):
    if message.from_user.id in admins:
        await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.....")
        await message.answer_sticker("https://chpic.su/_data/stickers/m/menhera_anime/menhera_anime_045.webp?v=1693440002", "rb")
        

@dp.message_handler(Text(equals=["üö®–û–±–æ—Ä–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"]))
async def btn_disconnect(message: types.Message):
    if message.from_user.id in admins:
        await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.....")
        await message.answer_sticker("https://chpic.su/_data/stickers/m/menhera_anime/menhera_anime_045.webp?v=1693440002", "rb")

@dp.message_handler(Text(equals=["üóë–û—Ç—á–∏—Å—Ç–∏—Ç—å –º—É—Å–æ—Ä"]))
async def btn_clear(message: types.Message):
    if message.from_user.id in admins:
        await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.....")
        await message.answer_sticker("https://chpic.su/_data/stickers/m/menhera_anime/menhera_anime_045.webp?v=1693440002", "rb")

@dp.message_handler(Text(equals=["–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏"]))
async def btn_recovery(message: types.Message):
    if message.from_user.id in admins:
        await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.....")
        await message.answer_sticker("https://chpic.su/_data/stickers/m/menhera_anime/menhera_anime_045.webp?v=1693440002", "rb")
# ---------------------------

async def checkStatus():
    while True:
        response = getStatus()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="fail"))
        if response != 500:
            for user_id in admins:
                for alert in response['allerts']:
                    alertCard = f"<b>[{alert['data'] if alert['data'] else ''}] {alert['description']}</b> " \
                                f"\n\n–¢–∏–ø –æ—à–∏–±–∫–∏ - {alert['type'] if alert['type'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}"
                    if alert['type'] == 3:
                        kbbk = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text='–û–±–æ—Ä–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', callback_data=f'pid:{alert["data"]}'))
                        await bot.send_message(user_id, alertCard, parse_mode='HTML', reply_markup=kbbk)
                    else:
                        await bot.send_message(user_id, alertCard, parse_mode='HTML')
        else:
            await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±—ç–∫–µ–Ω–¥—É")
        
        await asyncio.sleep(30)


@dp.callback_query_handler(text_contains="pid:")
async def inline_kb_answer_callback_handler(call: types.CallbackQuery):
   pid = call.data.split(":")[1]
   response = disconnectCon(pid)
   if response == 500:
       await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ—Ä–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
   elif response:
       await call.answer("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±–æ—Ä–≤–∞–Ω–æ")
   else:
       await call.answer(f"<b><i>{response['data']['data']} - [{response['data']['type']}</b></i>\n{response['data']['description']}")
    
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(checkStatus())
    executor.start_polling(dp, loop=loop, skip_updates=True)